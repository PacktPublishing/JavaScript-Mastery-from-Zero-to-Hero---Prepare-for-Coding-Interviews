{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red43\green53\blue116;\red0\green11\blue19;\red173\green173\blue173;
\red212\green174\blue117;\red34\green158\blue53;\red27\green66\blue117;\red134\green78\blue169;\red28\green92\blue255;
\red236\green101\blue197;}
{\*\expandedcolortbl;;\cssrgb\c21961\c28235\c52941;\cssrgb\c0\c4706\c9412;\cssrgb\c73333\c73333\c73333;
\cssrgb\c86667\c73333\c53333;\cssrgb\c13333\c66667\c26667;\cssrgb\c13333\c33333\c53333;\cssrgb\c60000\c40000\c72157;\cssrgb\c13333\c46667\c100000;
\cssrgb\c94902\c50196\c81569;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl480\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Course Notes:\cf4 \cb1 \strokec4 \
\cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "lesson"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Anagrams - Decoding Mutations in JavaScript\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Anagram: cinema and iceman\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 rearrange iceman to cinema: iceman - cinema\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 What if we had an array of two strings that held the exact \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 same values except in a different order? How could we go about verifying whether\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 they actually contained the same values or not programmatically?\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 IE: 1.'hello', 'olleh'\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Expected: true\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6     2. 'word', 'friend'\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Expected: false\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 `\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 // Code Examples:\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // Exercise\cf4 \cb1 \strokec4 \
\cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "exercise"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Exercise - Write A Program to Solve Anagram Puzzles \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Someone stops you on the street and says, 'hey you! Can you please help me!'\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Given the following Comparison List: \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 1. 'dynamite' \'96 'mayitend'\'a0\'a0\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 2. 'Statue of Liberty' \'96 'Sticky Bird free'\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 3. 'eleven plus two' \'96 'twelve plus one'\'a0\'a0\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 4. 'dragon king' - 'going Darn'\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 5. 'the Morse Code' \'96 'here come dots'\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 6. 'the nudist colony' \'96 'no untidy clothes'\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 1. Create 6 arrays which contain two strings each. The first string in the array \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 should be the first anagram string and the second string should be the second anagram string we are comparing.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 IE: array1 = ['dynamite', 'mayitend'] \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 2. Write a function which can determine whether the following phrase comparisons\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 are anagrams or not. If they are anagrams the function should return true\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 otherwise the function should return false!\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 *Be mindful to not add or change any spaces between phrases as we are not looking\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 at regex for this example and copy the strings in the description exactly as is.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Please share your solutions in the discord along with only the anagrams that are \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 actually anagrams. \cf4 \cb1 \strokec4 \
\
\
\cf6 \cb3 \strokec6 1. 'dynamite' \'96 'mayitend'\'a0\'a0\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 2. 'Statue of Liberty' \'96 'Sticky Bird free'\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 3. 'eleven plus two' \'96 'twelve plus one'\'a0\'a0\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 4. 'dragon king' - 'going Darn'\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 5. 'the Morse Code' \'96 'here come dots'\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 6. 'the nudist colony' \'96 'no untidy clothes'\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 `\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 // Exercise Solution:\cf4 \cb1 \strokec4 \

\f1\i \cf8 \cb3 \strokec8 let
\f0\i0 \cf4 \strokec4  arr1 \cf7 \strokec7 =\cf4 \strokec4  [\cf6 \strokec6 "dynaMite"\cf4 \strokec4 , \cf6 \strokec6 "MaYitend"\cf4 \strokec4 ]; \cf2 \strokec2 // T\cf4 \cb1 \strokec4 \

\f1\i \cf8 \cb3 \strokec8 let
\f0\i0 \cf4 \strokec4  arr2 \cf7 \strokec7 =\cf4 \strokec4  [\cf6 \strokec6 "Statue of Liberty"\cf4 \strokec4 , \cf6 \strokec6 "Sticky Bird free"\cf4 \strokec4 ]; \cf2 \strokec2 // F\cf4 \cb1 \strokec4 \

\f1\i \cf8 \cb3 \strokec8 let
\f0\i0 \cf4 \strokec4  arr3 \cf7 \strokec7 =\cf4 \strokec4  [\cf6 \strokec6 "eleven plus two"\cf4 \strokec4 , \cf6 \strokec6 "twelve plus one"\cf4 \strokec4 ]; \cf2 \strokec2 // T\cf4 \cb1 \strokec4 \

\f1\i \cf8 \cb3 \strokec8 let
\f0\i0 \cf4 \strokec4  arr4 \cf7 \strokec7 =\cf4 \strokec4  [\cf6 \strokec6 "dragon king"\cf4 \strokec4 , \cf6 \strokec6 "going Darn"\cf4 \strokec4 ]; \cf2 \strokec2 // FLAG\cf4 \cb1 \strokec4 \

\f1\i \cf8 \cb3 \strokec8 let
\f0\i0 \cf4 \strokec4  arr5 \cf7 \strokec7 =\cf4 \strokec4  [\cf6 \strokec6 "the Morse Code"\cf4 \strokec4 , \cf6 \strokec6 "here come dots"\cf4 \strokec4 ]; \cf2 \strokec2 // T\cf4 \cb1 \strokec4 \

\f1\i \cf8 \cb3 \strokec8 let
\f0\i0 \cf4 \strokec4  arr6 \cf7 \strokec7 =\cf4 \strokec4  [\cf6 \strokec6 "the nudist colony"\cf4 \strokec4 , \cf6 \strokec6 "no untidy clothes"\cf4 \strokec4 ]; \cf2 \strokec2 // T\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // Solution I\cf4 \cb1 \strokec4 \
\

\f1\i \cf8 \cb3 \strokec8 function
\f0\i0 \cf4 \strokec4  \cf5 \strokec5 decodeMutations\cf4 \strokec4 (
\f1\i \cf9 \strokec9 arr
\f0\i0 \cf4 \strokec4 ) \{\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  array1 \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  array2 \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3   array1.\cf5 \strokec5 push\cf4 \strokec4 (\cf7 \strokec7 ...\cf4 \strokec4 arr[\cf10 \strokec10 0\cf4 \strokec4 ]);\cb1 \
\cb3   array2.\cf5 \strokec5 push\cf4 \strokec4 (\cf7 \strokec7 ...\cf4 \strokec4 arr[\cf10 \strokec10 1\cf4 \strokec4 ]);\cb1 \
\cb3   
\f1\i \cf8 \strokec8 const
\f0\i0 \cf4 \strokec4  lowCase1 \cf7 \strokec7 =\cf4 \strokec4  array1.\cf5 \strokec5 map\cf4 \strokec4 ((
\f1\i \cf9 \strokec9 char
\f0\i0 \cf4 \strokec4 ) 
\f1\i \cf8 \strokec8 =>
\f0\i0 \cf4 \strokec4  char.\cf5 \strokec5 toLowerCase\cf4 \strokec4 ());\cb1 \
\cb3   
\f1\i \cf8 \strokec8 const
\f0\i0 \cf4 \strokec4  lowCase2 \cf7 \strokec7 =\cf4 \strokec4  array2.\cf5 \strokec5 map\cf4 \strokec4 ((
\f1\i \cf9 \strokec9 char
\f0\i0 \cf4 \strokec4 ) 
\f1\i \cf8 \strokec8 =>
\f0\i0 \cf4 \strokec4  char.\cf5 \strokec5 toLowerCase\cf4 \strokec4 ());\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  str1 \cf7 \strokec7 =\cf4 \strokec4  lowCase1.\cf5 \strokec5 sort\cf4 \strokec4 ().\cf5 \strokec5 join\cf4 \strokec4 (\cf6 \strokec6 ""\cf4 \strokec4 );\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  str2 \cf7 \strokec7 =\cf4 \strokec4  lowCase2.\cf5 \strokec5 sort\cf4 \strokec4 ().\cf5 \strokec5 join\cf4 \strokec4 (\cf6 \strokec6 ""\cf4 \strokec4 );\cb1 \
\cb3   
\f1\i \cf8 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 "c1 - dynamite:"\cf4 \strokec4 , lowCase1, \cf6 \strokec6 "c2 - mayitend:"\cf4 \strokec4 , str2);\cb1 \
\cb3   \cf7 \strokec7 if\cf4 \strokec4  (str1 \cf7 \strokec7 ===\cf4 \strokec4  str2) \cf7 \strokec7 return\cf4 \strokec4  \cf10 \strokec10 true\cf4 \strokec4 ;\cb1 \
\cb3   \cf7 \strokec7 else\cf4 \strokec4  \cf7 \strokec7 return\cf4 \strokec4  \cf10 \strokec10 false\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 "Exercise Solution I"\cf4 \strokec4 , \cf5 \strokec5 decodeMutations\cf4 \strokec4 (arr1));\cb1 \
\

\f1\i \cf8 \cb3 \strokec8 function
\f0\i0 \cf4 \strokec4  \cf5 \strokec5 decodeMutations2\cf4 \strokec4 (
\f1\i \cf9 \strokec9 arr
\f0\i0 \cf4 \strokec4 ) \{\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  comp2 \cf7 \strokec7 =\cf4 \strokec4  arr[\cf10 \strokec10 1\cf4 \strokec4 ].\cf5 \strokec5 toLowerCase\cf4 \strokec4 ();\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  comp1 \cf7 \strokec7 =\cf4 \strokec4  arr[\cf10 \strokec10 0\cf4 \strokec4 ].\cf5 \strokec5 toLowerCase\cf4 \strokec4 ();\cb1 \
\cb3   \cf7 \strokec7 for\cf4 \strokec4  (
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  i \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ; i \cf7 \strokec7 <\cf4 \strokec4  comp2.length; i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 if\cf4 \strokec4  (comp1.\cf5 \strokec5 indexOf\cf4 \strokec4 (comp2[i]) \cf7 \strokec7 ===\cf4 \strokec4  \cf7 \strokec7 -\cf10 \strokec10 1\cf4 \strokec4 ) \cf7 \strokec7 return\cf4 \strokec4  \cf10 \strokec10 false\cf4 \strokec4 ;\cb1 \
\cb3     \cf2 \strokec2 // console.log('evaluation:', comp1.indexOf(comp2[i]))\cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\cb3   
\f1\i \cf8 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 "c1"\cf4 \strokec4 , comp1, \cf6 \strokec6 "c2"\cf4 \strokec4 , comp2);\cb1 \
\cb3   \cf7 \strokec7 if\cf4 \strokec4  (comp2.length \cf7 \strokec7 ===\cf4 \strokec4  comp1.length) \cf7 \strokec7 return\cf4 \strokec4  \cf10 \strokec10 true\cf4 \strokec4 ;\cb1 \
\cb3   \cf7 \strokec7 else\cf4 \strokec4  \cf7 \strokec7 return\cf4 \strokec4  \cf10 \strokec10 false\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
\

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 "Exercise Solution II"\cf4 \strokec4 , \cf5 \strokec5 decodeMutations2\cf4 \strokec4 (arr1));\cb1 \
\
\cf2 \cb3 \strokec2 // BONUS find out which function has a bug\cf4 \cb1 \strokec4 \
\
\
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \
}
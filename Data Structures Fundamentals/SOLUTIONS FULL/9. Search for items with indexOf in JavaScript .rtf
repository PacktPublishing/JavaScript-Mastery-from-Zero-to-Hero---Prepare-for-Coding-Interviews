{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red43\green53\blue116;\red0\green11\blue19;\red173\green173\blue173;
\red212\green174\blue117;\red34\green158\blue53;\red27\green66\blue117;\red134\green78\blue169;\red28\green92\blue255;
\red236\green101\blue197;}
{\*\expandedcolortbl;;\cssrgb\c21961\c28235\c52941;\cssrgb\c0\c4706\c9412;\cssrgb\c73333\c73333\c73333;
\cssrgb\c86667\c73333\c53333;\cssrgb\c13333\c66667\c26667;\cssrgb\c13333\c33333\c53333;\cssrgb\c60000\c40000\c72157;\cssrgb\c13333\c46667\c100000;
\cssrgb\c94902\c50196\c81569;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl480\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Course Notes:\cf4 \cb1 \strokec4 \
\cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "lesson"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Search for items with indexOf in JavaScript\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Array data can get fairly large and complex. It can also mutate and change over time including\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 order and information of what is being added and removed as we have seen up to this point. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 That being said, we can use a very handy method that javaScript offers called indexOf which\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 quickly searches for us whether an element exists in an array or not and which index location\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 it is being stored in.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Basically, indexOf takes one parameter which is the element you are searching for and returns\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 the index position. If the element does not exist in the array then it will return the value\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 -1. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Example 1: Search through an array with indexOf\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 `\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 // Code Examples:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // Example 1: Search through an array with indexOf\cf4 \cb1 \strokec4 \
\

\f1\i \cf8 \cb3 \strokec8 let
\f0\i0 \cf4 \strokec4  kingsCourt \cf7 \strokec7 =\cf4 \strokec4  [\cf6 \strokec6 "jester"\cf4 \strokec4 , \cf6 \strokec6 "queen"\cf4 \strokec4 , \cf6 \strokec6 "throne"\cf4 \strokec4 , \cf6 \strokec6 "spooky advisor"\cf4 \strokec4 ];\cb1 \

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cb1 \
\cb3   kingsCourt.\cf5 \strokec5 indexOf\cf4 \strokec4 (\cf6 \strokec6 "throne"\cf4 \strokec4 ),\cb1 \
\cb3   kingsCourt.\cf5 \strokec5 indexOf\cf4 \strokec4 (\cf6 \strokec6 "magic arrows"\cf4 \strokec4 ),\cb1 \
\cb3   kingsCourt.\cf5 \strokec5 indexOf\cf4 \strokec4 (\cf6 \strokec6 "spooky advisor"\cf4 \strokec4 )\cb1 \
\cb3 );\cb1 \
\
\cf2 \cb3 \strokec2 // Exercise\cf4 \cb1 \strokec4 \
\cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "exercise"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Exercise: Search for game items and clone the kingdom!\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Rumor has it that back at the kingdom the magic arrows have returned. If this is true\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 you will have to use your wizard powers to save the kingdom by cloning it multiple times \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 and create parralel worlds to confuse the kingdom's enemies from dicserning the original from\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 the copies. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 1. Write a function called searchAndClone which takes two arguments: array and elem.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 2. Log into the console searchAndClone passing in the following kingdom total updated data: \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 "throne", "silver sword", "magic arrows"\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 3. Back in the funciton searchAndClone write in logic using the indexOf method to search\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 and see whether or not the element magic arrows exists in the searchAndClone arr argument. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 If magic arrows does exist then add conditional logic so that the function will push two\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 copies of the argument array into a new array and return the array. Additionally, if the magic\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 arrows string does not exist as an element in the argument array then return an error message\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 to the console stating that the magic arrows are not to be found. \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 4. Save the kingdom from impending doom and post your solution in the discord #datastructures\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 channel.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Good luck, brave Warlock! \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 `\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 // Exercise Solution:\cf4 \cb1 \strokec4 \
\

\f1\i \cf8 \cb3 \strokec8 function
\f0\i0 \cf4 \strokec4  \cf5 \strokec5 searchAndClone\cf4 \strokec4 (
\f1\i \cf9 \strokec9 array
\f0\i0 \cf4 \strokec4 , 
\f1\i \cf9 \strokec9 elem
\f0\i0 \cf4 \strokec4 ) \{\cb1 \
\cb3   \cf2 \strokec2 // Only change code below this line\cf4 \cb1 \strokec4 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  num \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 2\cf4 \strokec4 ;\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  newArray \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3   \cf7 \strokec7 if\cf4 \strokec4  (array.\cf5 \strokec5 indexOf\cf4 \strokec4 (elem) \cf7 \strokec7 >\cf4 \strokec4  \cf7 \strokec7 -\cf10 \strokec10 1\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 while\cf4 \strokec4  (num \cf7 \strokec7 >\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ) \{\cb1 \
\cb3       newArray.\cf5 \strokec5 push\cf4 \strokec4 ([\cf7 \strokec7 ...\cf4 \strokec4 array]);\cb1 \
\cb3       num\cf7 \strokec7 --\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cf7 \strokec7 return\cf4 \strokec4  newArray;\cb1 \
\cb3   \} \cf7 \strokec7 else\cf4 \strokec4  \{\cb1 \
\cb3     \cf7 \strokec7 return\cf4 \strokec4  \cf6 \strokec6 "the magic arrows are not to be found"\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cf2 \strokec2 // Only change code above this line\cf4 \cb1 \strokec4 \
\cb3 \}\cb1 \
\

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cb1 \
\cb3   \cf5 \strokec5 searchAndClone\cf4 \strokec4 ([\cf6 \strokec6 "throne"\cf4 \strokec4 , \cf6 \strokec6 "silver sword"\cf4 \strokec4 , \cf6 \strokec6 "magic arrows"\cf4 \strokec4 ], \cf6 \strokec6 "magic arrows"\cf4 \strokec4 )\cb1 \
\cb3 );\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \
}
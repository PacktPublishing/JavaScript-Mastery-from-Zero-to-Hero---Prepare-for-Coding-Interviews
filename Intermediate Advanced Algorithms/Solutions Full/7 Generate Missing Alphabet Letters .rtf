{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red43\green53\blue116;\red0\green11\blue19;\red173\green173\blue173;
\red212\green174\blue117;\red34\green158\blue53;\red27\green66\blue117;\red134\green78\blue169;\red236\green101\blue197;
\red28\green92\blue255;}
{\*\expandedcolortbl;;\cssrgb\c21961\c28235\c52941;\cssrgb\c0\c4706\c9412;\cssrgb\c73333\c73333\c73333;
\cssrgb\c86667\c73333\c53333;\cssrgb\c13333\c66667\c26667;\cssrgb\c13333\c33333\c53333;\cssrgb\c60000\c40000\c72157;\cssrgb\c94902\c50196\c81569;
\cssrgb\c13333\c46667\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl480\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Course Notes:\cf4 \cb1 \strokec4 \
\cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "lesson"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Generate Missing Alphabet Letters\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 We can leverage the charCodeAt() method which will return an integer between 0 and 65535 \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 representing the UTF-16 code unit at the given index. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Now, while it may prove cumbersome to go through characters when it comes to modifying\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 string values for various purposes, by having a clear understanding of their UTF codes\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 and how we can manipulate them, we can render this process much more efficient and gain\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 real flexibility.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Examples: UTF-16 values \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 `\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 // Code Examples:\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // Examples: UTF-16 values\cf4 \cb1 \strokec4 \

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 "Example II"\cf4 \strokec4 , \cf6 \strokec6 "abc"\cf4 \strokec4 .\cf5 \strokec5 charCodeAt\cf4 \strokec4 (\cf9 \strokec9 0\cf4 \strokec4 ));\cb1 \

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 "Example I"\cf4 \strokec4 , 
\f1\i \cf8 \strokec8 String
\f0\i0 \cf4 \strokec4 .\cf5 \strokec5 fromCharCode\cf4 \strokec4 (\cf9 \strokec9 97\cf4 \strokec4 ));\cb1 \
\
\cf2 \cb3 \strokec2 // Exercise\cf4 \cb1 \strokec4 \
\cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "exercise"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Exercise: Generate Missing Alphabet Letters\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 You are at an interview and the interviewer asks you how familiar \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 you are with UFT in JavaScript\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 It's time to show them your skills...\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 1. Write a function generateLetters which takes a string as an argument.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 2. The function should be able to input any given two alphabet letters and output \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 all of the missing alphabet letters in between the two letters including the original\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 input in the correct alphabetized order. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 For Ex: \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Input: 'ad', Expected output: 'abcd'\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 3. Log and call the function passing in the string 'ap'\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 4. Share your solution in the discord in the #algorithms channel and good luck! `\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 // Exercise Solution:\cf4 \cb1 \strokec4 \
\

\f1\i \cf8 \cb3 \strokec8 function
\f0\i0 \cf4 \strokec4  \cf5 \strokec5 generateLetters\cf4 \strokec4 (
\f1\i \cf10 \strokec10 str
\f0\i0 \cf4 \strokec4 ) \{\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  alpha \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 ""\cf4 \strokec4 ;\cb1 \
\cb3   \cf7 \strokec7 for\cf4 \strokec4  (
\f1\i \cf8 \strokec8 var
\f0\i0 \cf4 \strokec4  i \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ; i \cf7 \strokec7 <\cf4 \strokec4  str.length; i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3     
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  code \cf7 \strokec7 =\cf4 \strokec4  str.\cf5 \strokec5 charCodeAt\cf4 \strokec4 (i);\cb1 \
\
\cb3     \cf7 \strokec7 if\cf4 \strokec4  (code \cf7 \strokec7 !==\cf4 \strokec4  str.\cf5 \strokec5 charCodeAt\cf4 \strokec4 (\cf9 \strokec9 0\cf4 \strokec4 ) \cf7 \strokec7 +\cf4 \strokec4  i) \{\cb1 \
\cb3       
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  letterDifference \cf7 \strokec7 =\cf4 \strokec4  str.\cf5 \strokec5 charCodeAt\cf4 \strokec4 (\cf9 \strokec9 0\cf4 \strokec4 ) \cf7 \strokec7 +\cf4 \strokec4  i \cf7 \strokec7 -\cf4 \strokec4  code;\cb1 \
\cb3       letterDifference \cf7 \strokec7 *=\cf4 \strokec4  \cf7 \strokec7 -\cf9 \strokec9 1\cf4 \strokec4 ;\cb1 \
\cb3       
\f1\i \cf8 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (letterDifference);\cb1 \
\cb3       \cf7 \strokec7 for\cf4 \strokec4  (
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  i \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 0\cf4 \strokec4 ; i \cf7 \strokec7 <\cf4 \strokec4  letterDifference; i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3         alpha \cf7 \strokec7 +=\cf4 \strokec4  
\f1\i \cf8 \strokec8 String
\f0\i0 \cf4 \strokec4 .\cf5 \strokec5 fromCharCode\cf4 \strokec4 ((code \cf7 \strokec7 -=\cf4 \strokec4  \cf9 \strokec9 1\cf4 \strokec4 ));\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  reversedAlpha \cf7 \strokec7 =\cf4 \strokec4  alpha.\cf5 \strokec5 split\cf4 \strokec4 (\cf6 \strokec6 ""\cf4 \strokec4 ).\cf5 \strokec5 reverse\cf4 \strokec4 ().\cf5 \strokec5 join\cf4 \strokec4 (\cf6 \strokec6 ""\cf4 \strokec4 );\cb1 \
\cb3   \cf7 \strokec7 return\cf4 \strokec4  str[\cf9 \strokec9 0\cf4 \strokec4 ].\cf5 \strokec5 concat\cf4 \strokec4 (reversedAlpha).\cf5 \strokec5 concat\cf4 \strokec4 (str[\cf9 \strokec9 1\cf4 \strokec4 ]);\cb1 \
\cb3 \}\cb1 \
\
\cf2 \cb3 \strokec2 // test here\cf4 \cb1 \strokec4 \

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 "Exercise Solution"\cf4 \strokec4 , \cf5 \strokec5 generateLetters\cf4 \strokec4 (\cf6 \strokec6 "ap"\cf4 \strokec4 ));\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \
}
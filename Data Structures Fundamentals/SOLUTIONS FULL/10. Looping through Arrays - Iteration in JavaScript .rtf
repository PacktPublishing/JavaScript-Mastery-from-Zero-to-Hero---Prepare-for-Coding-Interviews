{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red43\green53\blue116;\red0\green11\blue19;\red173\green173\blue173;
\red212\green174\blue117;\red34\green158\blue53;\red27\green66\blue117;\red134\green78\blue169;\red28\green92\blue255;
\red236\green101\blue197;\red134\green78\blue169;\red0\green11\blue19;\red173\green173\blue173;\red27\green66\blue117;
\red34\green158\blue53;}
{\*\expandedcolortbl;;\cssrgb\c21961\c28235\c52941;\cssrgb\c0\c4706\c9412;\cssrgb\c73333\c73333\c73333;
\cssrgb\c86667\c73333\c53333;\cssrgb\c13333\c66667\c26667;\cssrgb\c13333\c33333\c53333;\cssrgb\c60000\c40000\c72157;\cssrgb\c13333\c46667\c100000;
\cssrgb\c94902\c50196\c81569;\cssrgb\c60000\c40000\c72157;\cssrgb\c0\c4706\c9412;\cssrgb\c73333\c73333\c73333;\cssrgb\c13333\c33333\c53333;
\cssrgb\c13333\c66667\c26667;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl480\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Course Notes:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "lesson"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf6 \cb3 \strokec6 Looping through Arrays - Iteration in JavaScript\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 In JavaScript, it can be quite useful to loop through each element in an array\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 and do something with the data. Whether it's to search or mutate the array based\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 on the information that you find and JavaScript offers multiple built in methods\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 for you to do this.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Some of these powerful methods include forEach(), map(), and every(), however \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 the most workable one to use is the infamous for loop.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Ex 1: Push each word in a string into a single array\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 `\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 \strokec2 // Code Examples:\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // Ex 1: Push each word in a string into a single array\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i \cf8 \cb3 \strokec8 function
\f0\i0 \cf4 \strokec4  \cf5 \strokec5 convertStringToArray\cf4 \strokec4 (
\f1\i \cf9 \strokec9 words
\f0\i0 \cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  wordArray \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  wordsSplit \cf7 \strokec7 =\cf4 \strokec4  words.\cf5 \strokec5 split\cf4 \strokec4 (\cf6 \strokec6 " "\cf4 \strokec4 );\cb1 \
\cb3   \cf7 \strokec7 for\cf4 \strokec4 (
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  i\cf7 \strokec7 =\cf10 \strokec10 0\cf4 \strokec4 ;i\cf7 \strokec7 <\cf4 \strokec4 wordsSplit.length;i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3       wordArray.\cf5 \strokec5 push\cf4 \strokec4 (wordsSplit[i])\cb1 \
\cb3   \}\cb1 \
\cb3   \cf7 \strokec7 return\cf4 \strokec4  wordArray\cb1 \
\cb3   \}\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 'Example 1'\cf4 \strokec4 , \cf5 \strokec5 convertStringToArray\cf4 \strokec4 (\cf6 \strokec6 "almonds pistaccio blueberries straberries chips coffee"\cf4 \strokec4 )\cb1 \
\cb3 );\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 \strokec2 // Exercise\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "exercise"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf6 \cb3 \strokec6 Exercise - Chunking with Nested Loops\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 1. Copy the nested arrays chunked from your description into the Exercise Solution portion\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 of the IDE. \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i \cf11 \cb12 \outl0\strokewidth0 let
\f0\i0 \cf13  chunked \cf14 =\cf13  [[\cf15 'a'\cf13 ,\cf15 'b'\cf13 ,\cf15 'c'\cf13 ], [\cf15 'd'\cf13 ,\cf15 'e'\cf13 ,\cf15 'f'\cf13 ], [\cf15 'g'\cf13 ,\cf15 'h'\cf13 ,\cf15 'i'\cf13 ]];\cf4 \cb1 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf6 \cb3 \strokec6 2. Write a function called alphabet that 'unchunks' the nested arrays and returns all the string \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 elements in chunked into a single array. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 3. Log the result and share in the discord in the #datastructures channel.\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 `\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3 ;\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 \strokec2 // Exercise Solution:\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i \cf8 \cb3 \strokec8 let
\f0\i0 \cf4 \strokec4  chunked \cf7 \strokec7 =\cf4 \strokec4  [[\cf6 \strokec6 'a'\cf4 \strokec4 ,\cf6 \strokec6 'b'\cf4 \strokec4 ,\cf6 \strokec6 'c'\cf4 \strokec4 ], [\cf6 \strokec6 'd'\cf4 \strokec4 ,\cf6 \strokec6 'e'\cf4 \strokec4 ,\cf6 \strokec6 'f'\cf4 \strokec4 ], [\cf6 \strokec6 'g'\cf4 \strokec4 ,\cf6 \strokec6 'h'\cf4 \strokec4 ,\cf6 \strokec6 'i'\cf4 \strokec4 ]];\cb1 \
\

\f1\i \cf8 \cb3 \strokec8 function
\f0\i0 \cf4 \strokec4  \cf5 \strokec5 alphabet\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  arr \cf7 \strokec7 =\cf4 \strokec4  []\cb1 \
\cb3   \cf2 \strokec2 // how many times\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf7 \cb3 \strokec7 for\cf4 \strokec4 (
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  i \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ; i \cf7 \strokec7 <\cf4 \strokec4  chunked.length; i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 // each element\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 for\cf4 \strokec4 (
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  j \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ; j \cf7 \strokec7 <\cf4 \strokec4  chunked[i].length; j\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3        arr.\cf5 \strokec5 push\cf4 \strokec4 (chunked[i][j]);\cb1 \
\cb3    \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cf7 \strokec7 return\cf4 \strokec4  arr\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf6 \strokec6 'Exercise Solution'\cf4 \strokec4 , \cf5 \strokec5 alphabet\cf4 \strokec4 ())\cb1 \
\
}
{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red43\green53\blue116;\red0\green11\blue19;\red173\green173\blue173;
\red212\green174\blue117;\red34\green158\blue53;\red27\green66\blue117;\red134\green78\blue169;\red28\green92\blue255;
\red236\green101\blue197;}
{\*\expandedcolortbl;;\cssrgb\c21961\c28235\c52941;\cssrgb\c0\c4706\c9412;\cssrgb\c73333\c73333\c73333;
\cssrgb\c86667\c73333\c53333;\cssrgb\c13333\c66667\c26667;\cssrgb\c13333\c33333\c53333;\cssrgb\c60000\c40000\c72157;\cssrgb\c13333\c46667\c100000;
\cssrgb\c94902\c50196\c81569;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl480\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Course Notes:\cf4 \cb1 \strokec4 \
\cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "lesson"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 Hacking A Password with Matching keywords in JavaScript\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Finding matching values in javaScript is a very valuable algorithm with many uses.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Consider searching through an array of values and then testing each value to see if\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 it passes a truthiness test. This is an excellent method to match up values through\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 testing. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 let x = 34,\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 let y = [12,324325325,3523,235,35, 34...]\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 expected match = 34\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 `\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 // Code Examples:\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // Exercise\cf4 \cb1 \strokec4 \
\cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "exercise"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Exericse - Hacking A Password with Matching keywords in JavaScript\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 You're walking down the street and suddenly the FBI pulls you over and throws\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 you in the back of the van! Before you know it, you're at some secret location and are\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 given instructions to hack into the dark web and help prevent the end of the world!!\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 0. Insert the following array into your solution script (found in descriptions):\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 let keywordPossibilities = [\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   "cat",\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   "cold",\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   "this",\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   "is",\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   "frame",\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   "cutey",\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   "hope"\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 ];\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 1. Write a function called findMatch which takes two arguments: arr and a function.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 2. findMatch should conditionally check whether the function argument given any strings\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 in the keywordPossibilities are true and if they are to then store the string into the\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 findMatch function and then finally return the stored string value. \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 3. If the string does not exist in the array then findMatch should return an error\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 message stating that there is no match in this file.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 4. Log into the console findMatch passing in the keywordPossibilities as the first\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 argument and an anonymous assertion function for the second argument.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Ex Anonymous function:\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 function(ar) \{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   return ar\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 5. The second argument (anonymous function) passed into the findMatch function should take\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 an argument of a string and return the following assertion: \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 (copy exactly from the description): return string + " is a match" === "this is a match";\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 6. Share your solution in the discord #alogrithm channel and best of luck! \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 `\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 // Exercise Solution:\cf4 \cb1 \strokec4 \
\

\f1\i \cf8 \cb3 \strokec8 let
\f0\i0 \cf4 \strokec4  keywordPossibilities \cf7 \strokec7 =\cf4 \strokec4  [\cb1 \
\cb3   \cf6 \strokec6 "cat"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "cold"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "this"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "is"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "frame"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "cutey"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "hope"\cf4 \cb1 \strokec4 \
\cb3 ];\cb1 \
\

\f1\i \cf8 \cb3 \strokec8 function
\f0\i0 \cf4 \strokec4  \cf5 \strokec5 findMatch\cf4 \strokec4 (
\f1\i \cf9 \strokec9 arr
\f0\i0 \cf4 \strokec4 , 
\f1\i \cf9 \strokec9 func
\f0\i0 \cf4 \strokec4 ) \{\cb1 \
\cb3   
\f1\i \cf8 \strokec8 var
\f0\i0 \cf4 \strokec4  word \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 ""\cf4 \strokec4 ;\cb1 \
\
\cb3   \cf7 \strokec7 for\cf4 \strokec4  (
\f1\i \cf8 \strokec8 var
\f0\i0 \cf4 \strokec4  i \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ; i \cf7 \strokec7 <\cf4 \strokec4  arr.length; i\cf7 \strokec7 ++\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 if\cf4 \strokec4  (\cf5 \strokec5 func\cf4 \strokec4 (arr[i]) \cf7 \strokec7 ===\cf4 \strokec4  \cf10 \strokec10 true\cf4 \strokec4 ) \{\cb1 \
\cb3       word \cf7 \strokec7 =\cf4 \strokec4  arr[i];\cb1 \
\cb3       \cf7 \strokec7 return\cf4 \strokec4  word;\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cf7 \strokec7 if\cf4 \strokec4  (word \cf7 \strokec7 ===\cf4 \strokec4  \cf6 \strokec6 ""\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 return\cf4 \strokec4  \cf6 \strokec6 "there is no match in this file"\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cb1 \
\cb3   \cf6 \strokec6 "Exercise Solution"\cf4 \strokec4 ,\cb1 \
\cb3   \cf5 \strokec5 findMatch\cf4 \strokec4 (keywordPossibilities, 
\f1\i \cf8 \strokec8 function
\f0\i0 \cf4 \strokec4  (
\f1\i \cf9 \strokec9 string
\f0\i0 \cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 return\cf4 \strokec4  string \cf7 \strokec7 +\cf4 \strokec4  \cf6 \strokec6 " is a match"\cf4 \strokec4  \cf7 \strokec7 ===\cf4 \strokec4  \cf6 \strokec6 "this is a match"\cf4 \strokec4 ;\cb1 \
\cb3   \})\cb1 \
\cb3 );\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \
}
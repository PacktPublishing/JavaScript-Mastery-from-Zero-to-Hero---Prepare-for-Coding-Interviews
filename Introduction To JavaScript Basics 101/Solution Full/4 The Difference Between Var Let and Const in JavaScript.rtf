{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Italic;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red17\green17\blue17;\red255\green255\blue255;
\red214\green156\blue74;\red215\green219\blue225;\red118\green210\blue190;\red132\green99\blue212;\red102\green168\blue206;
\red183\green49\blue49;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c8235\c8235\c8235;\cssrgb\c100000\c100000\c100000;
\cssrgb\c87451\c67059\c36078;\cssrgb\c87451\c88627\c90588;\cssrgb\c52549\c85098\c79216;\cssrgb\c59216\c48627\c86275;\cssrgb\c46667\c71765\c84314;
\cssrgb\c77647\c27451\c25098;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\i\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Course Notes:
\f1\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 document\cf6 \strokec6 .\cf7 \strokec7 getElementById\cf6 \strokec6 ("\cf8 \strokec8 lesson\cf6 \strokec6 ").\cf5 \strokec5 innerHTML\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf8 \strokec8 `\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 An issue with using var to declare variables is that it can easily be over written\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 ES6, which was a update standardization to JavaScript addressed this issue by introduction\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 the let variable. If we replace var with let we will then get an error to avoid making the\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 mistake\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 let is a great way to remove the possibility of accidentally redefining variables but\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 ES6 didn't stop there. It gave JS another awesome gift by introducing the const variable\cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 The const variable has all the same features as let but it also is read only. That means\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8 that you can't accidentally reassign the const variable without throwing an error. \cf4 \cb1 \strokec4 \
\
\cf8 \cb3 \strokec8 `\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0

\f0\i \cf2 \cb3 \strokec2 // Code Examples:
\f1\i0 \cf4 \cb1 \strokec4 \
\

\f0\i \cf2 \cb3 \strokec2 // problem with var
\f1\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 var\cf4 \strokec4  \cf6 \strokec6 tom\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf10 \strokec10 3\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cf9 \cb3 \strokec9 var\cf4 \strokec4  \cf6 \strokec6 tom\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf10 \strokec10 4\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0

\f0\i \cf2 \cb3 \strokec2 // let tom = 3;
\f1\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 console\cf6 \strokec6 .\cf7 \strokec7 log\cf6 \strokec6 ("\cf8 \strokec8 Example1\cf6 \strokec6 ",\cf4 \strokec4  \cf6 \strokec6 tom);\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 const\cf4 \strokec4  \cf6 \strokec6 mike\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf10 \strokec10 3\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0

\f0\i \cf2 \cb3 \strokec2 //mike = 4;
\f1\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 console\cf6 \strokec6 .\cf7 \strokec7 log\cf6 \strokec6 ("\cf8 \strokec8 Example2\cf6 \strokec6 ",\cf4 \strokec4  \cf6 \strokec6 mike);\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0

\f0\i \cf2 \cb3 \strokec2 // Exercise
\f1\i0 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 document\cf6 \strokec6 .\cf7 \strokec7 getElementById\cf6 \strokec6 ("\cf8 \strokec8 exercise\cf6 \strokec6 ").\cf5 \strokec5 innerHTML\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf8 \strokec8 `\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 1. Create a read only variable x and assign it the string 'this is read only' \cf4 \cb1 \strokec4 \
\
\
\cf8 \cb3 \strokec8 `\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 const\cf4 \strokec4  \cf6 \strokec6 x\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf6 \strokec6 "\cf8 \strokec8 this is read only\cf6 \strokec6 ";\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 console\cf6 \strokec6 .\cf7 \strokec7 log\cf6 \strokec6 (x);\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0

\f0\i \cf2 \cb3 \strokec2 // Exercise Solution:
\f1\i0 \cf4 \cb1 \strokec4 \
\
}
{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red43\green53\blue116;\red0\green11\blue19;\red173\green173\blue173;
\red212\green174\blue117;\red34\green158\blue53;\red27\green66\blue117;\red134\green78\blue169;\red28\green92\blue255;
\red236\green101\blue197;}
{\*\expandedcolortbl;;\cssrgb\c21961\c28235\c52941;\cssrgb\c0\c4706\c9412;\cssrgb\c73333\c73333\c73333;
\cssrgb\c86667\c73333\c53333;\cssrgb\c13333\c66667\c26667;\cssrgb\c13333\c33333\c53333;\cssrgb\c60000\c40000\c72157;\cssrgb\c13333\c46667\c100000;
\cssrgb\c94902\c50196\c81569;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl480\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // Course Notes:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "lesson"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf6 \cb3 \strokec6 Chunking Arrays into Groups & Subarrays \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 RECALL!\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 The array.slice method can extract a slice from the beginning, \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 middle, or end of an array for whatever \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 purposes you require, without changing the original array.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 `\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 \strokec2 // Code Examples:\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // Exercise\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3 document.\cf5 \strokec5 getElementById\cf4 \strokec4 (\cf6 \strokec6 "exercise"\cf4 \strokec4 ).innerHTML \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 `\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0
\cf6 \cb3 \strokec6 Exercise - Capture The Flag Groups of Teams\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 You are a working on a capture the flag style Call of Duty game\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 regardless whether you're into shooter types or not! :P \cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 Your boss comes up to you asks you to create a function that can\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 take an array of 6 players and divide them up evenly into 3 teams\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 each time containing its own sub array of two players.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 1. Create an array called captureTheFlagPlayers and input the following\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 player string data:\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 ["player 1", "player 2", \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 "player 3", "player 4",\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 "player 5", "player 6"]\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 2. Write a function chunkPlayersIntoGroups which can take the \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 captureTheFlagPlayers array as an argument and return the player data\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 divided into 3 even teams each containing its own sub array \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 of two players each.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 3. Call and log the function passing in the captureTheFlagPlayers array.\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6 4. Share your solutions on the discord #algorithms channel! \cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 `\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \cb3 \strokec2 // Exercise Solution:\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i \cf8 \cb3 \strokec8 let
\f0\i0 \cf4 \strokec4  captureTheFlagPlayers \cf7 \strokec7 =\cf4 \strokec4  [\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 "player 1"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "player 2"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "player 3"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "player 4"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "player 5"\cf4 \strokec4 ,\cb1 \
\cb3   \cf6 \strokec6 "player 6"\cf4 \cb1 \strokec4 \
\cb3 ];\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i \cf8 \cb3 \strokec8 function
\f0\i0 \cf4 \strokec4  \cf5 \strokec5 chunkPlayersIntoGroups\cf4 \strokec4 (
\f1\i \cf9 \strokec9 array
\f0\i0 \cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  temp \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  i,\cb1 \
\cb3     chunk \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 2\cf4 \strokec4 ;\cb1 \
\cb3   \cf7 \strokec7 for\cf4 \strokec4  (i \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ; i \cf7 \strokec7 <\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ; i \cf7 \strokec7 +=\cf4 \strokec4  chunk) \{\cb1 \
\cb3     temp.\cf5 \strokec5 push\cf4 \strokec4 (array.\cf5 \strokec5 slice\cf4 \strokec4 (i, i \cf7 \strokec7 +\cf4 \strokec4  chunk));\cb1 \
\cb3   \}\cb1 \
\cb3   \cf7 \strokec7 return\cf4 \strokec4  temp;\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 "Exercise Solution I"\cf4 \strokec4 ,\cb1 \
\cb3   \cf5 \strokec5 chunkPlayersIntoGroups\cf4 \strokec4 (captureTheFlagPlayers)\cb1 \
\cb3 );\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i \cf8 \cb3 \strokec8 function
\f0\i0 \cf4 \strokec4  \cf5 \strokec5 chunkPlayersIntoGroups2\cf4 \strokec4 (
\f1\i \cf9 \strokec9 array
\f0\i0 \cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  temp \cf7 \strokec7 =\cf4 \strokec4  [];\cb1 \
\cb3   
\f1\i \cf8 \strokec8 let
\f0\i0 \cf4 \strokec4  i \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 0\cf4 \strokec4 ,\cb1 \
\cb3     chunk \cf7 \strokec7 =\cf4 \strokec4  \cf10 \strokec10 2\cf4 \strokec4 ;\cb1 \
\cb3   \cf7 \strokec7 while\cf4 \strokec4  (i \cf7 \strokec7 <\cf4 \strokec4  array.length) \{\cb1 \
\cb3     temp.\cf5 \strokec5 push\cf4 \strokec4 (array.\cf5 \strokec5 slice\cf4 \strokec4 (i, i \cf7 \strokec7 +\cf4 \strokec4  chunk));\cb1 \
\cb3     i \cf7 \strokec7 +=\cf4 \strokec4  chunk;\cb1 \
\cb3   \}\cb1 \
\cb3   \cf7 \strokec7 return\cf4 \strokec4  temp;\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\i \cf8 \cb3 \strokec8 console
\f0\i0 \cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cb1 \
\pard\pardeftab720\sl480\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 "Exercise Solution II"\cf4 \strokec4 ,\cb1 \
\cb3   \cf5 \strokec5 chunkPlayersIntoGroups2\cf4 \strokec4 (captureTheFlagPlayers)\cb1 \
\cb3 );\cb1 \
\
}